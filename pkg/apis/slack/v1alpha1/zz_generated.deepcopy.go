// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Org) DeepCopyInto(out *Org) {
	*out = *in
	if in.Repos != nil {
		in, out := &in.Repos, &out.Repos
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Org.
func (in *Org) DeepCopy() *Org {
	if in == nil {
		return nil
	}
	out := new(Org)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackBot) DeepCopyInto(out *SlackBot) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackBot.
func (in *SlackBot) DeepCopy() *SlackBot {
	if in == nil {
		return nil
	}
	out := new(SlackBot)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SlackBot) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackBotList) DeepCopyInto(out *SlackBotList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SlackBot, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackBotList.
func (in *SlackBotList) DeepCopy() *SlackBotList {
	if in == nil {
		return nil
	}
	out := new(SlackBotList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SlackBotList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackBotMode) DeepCopyInto(out *SlackBotMode) {
	*out = *in
	if in.Orgs != nil {
		in, out := &in.Orgs, &out.Orgs
		*out = make([]Org, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreLabels != nil {
		in, out := &in.IgnoreLabels, &out.IgnoreLabels
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackBotMode.
func (in *SlackBotMode) DeepCopy() *SlackBotMode {
	if in == nil {
		return nil
	}
	out := new(SlackBotMode)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SlackBotSpec) DeepCopyInto(out *SlackBotSpec) {
	*out = *in
	out.TokenReference = in.TokenReference
	if in.PullRequests != nil {
		in, out := &in.PullRequests, &out.PullRequests
		*out = make([]SlackBotMode, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Pipelines != nil {
		in, out := &in.Pipelines, &out.Pipelines
		*out = make([]SlackBotMode, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Statuses.DeepCopyInto(&out.Statuses)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SlackBotSpec.
func (in *SlackBotSpec) DeepCopy() *SlackBotSpec {
	if in == nil {
		return nil
	}
	out := new(SlackBotSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Status) DeepCopyInto(out *Status) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Status.
func (in *Status) DeepCopy() *Status {
	if in == nil {
		return nil
	}
	out := new(Status)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Statuses) DeepCopyInto(out *Statuses) {
	*out = *in
	if in.Succeeded != nil {
		in, out := &in.Succeeded, &out.Succeeded
		*out = new(Status)
		**out = **in
	}
	if in.Failed != nil {
		in, out := &in.Failed, &out.Failed
		*out = new(Status)
		**out = **in
	}
	if in.NotApproved != nil {
		in, out := &in.NotApproved, &out.NotApproved
		*out = new(Status)
		**out = **in
	}
	if in.Approved != nil {
		in, out := &in.Approved, &out.Approved
		*out = new(Status)
		**out = **in
	}
	if in.Running != nil {
		in, out := &in.Running, &out.Running
		*out = new(Status)
		**out = **in
	}
	if in.Hold != nil {
		in, out := &in.Hold, &out.Hold
		*out = new(Status)
		**out = **in
	}
	if in.NeedsOkToTest != nil {
		in, out := &in.NeedsOkToTest, &out.NeedsOkToTest
		*out = new(Status)
		**out = **in
	}
	if in.Merged != nil {
		in, out := &in.Merged, &out.Merged
		*out = new(Status)
		**out = **in
	}
	if in.Pending != nil {
		in, out := &in.Pending, &out.Pending
		*out = new(Status)
		**out = **in
	}
	if in.Errored != nil {
		in, out := &in.Errored, &out.Errored
		*out = new(Status)
		**out = **in
	}
	if in.Aborted != nil {
		in, out := &in.Aborted, &out.Aborted
		*out = new(Status)
		**out = **in
	}
	if in.LGTM != nil {
		in, out := &in.LGTM, &out.LGTM
		*out = new(Status)
		**out = **in
	}
	if in.Unknown != nil {
		in, out := &in.Unknown, &out.Unknown
		*out = new(Status)
		**out = **in
	}
	if in.Closed != nil {
		in, out := &in.Closed, &out.Closed
		*out = new(Status)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Statuses.
func (in *Statuses) DeepCopy() *Statuses {
	if in == nil {
		return nil
	}
	out := new(Statuses)
	in.DeepCopyInto(out)
	return out
}
