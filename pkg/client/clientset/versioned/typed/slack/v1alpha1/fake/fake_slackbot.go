// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/jenkins-x-labs/slack/pkg/apis/slack/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSlackBots implements SlackBotInterface
type FakeSlackBots struct {
	Fake *FakeSlackV1alpha1
	ns   string
}

var slackbotsResource = schema.GroupVersionResource{Group: "slack.app.jenkins-x-labs.com", Version: "v1alpha1", Resource: "slackbots"}

var slackbotsKind = schema.GroupVersionKind{Group: "slack.app.jenkins-x-labs.com", Version: "v1alpha1", Kind: "SlackBot"}

// Get takes name of the slackBot, and returns the corresponding slackBot object, and an error if there is any.
func (c *FakeSlackBots) Get(name string, options v1.GetOptions) (result *v1alpha1.SlackBot, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(slackbotsResource, c.ns, name), &v1alpha1.SlackBot{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SlackBot), err
}

// List takes label and field selectors, and returns the list of SlackBots that match those selectors.
func (c *FakeSlackBots) List(opts v1.ListOptions) (result *v1alpha1.SlackBotList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(slackbotsResource, slackbotsKind, c.ns, opts), &v1alpha1.SlackBotList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SlackBotList{ListMeta: obj.(*v1alpha1.SlackBotList).ListMeta}
	for _, item := range obj.(*v1alpha1.SlackBotList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested slackBots.
func (c *FakeSlackBots) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(slackbotsResource, c.ns, opts))

}

// Create takes the representation of a slackBot and creates it.  Returns the server's representation of the slackBot, and an error, if there is any.
func (c *FakeSlackBots) Create(slackBot *v1alpha1.SlackBot) (result *v1alpha1.SlackBot, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(slackbotsResource, c.ns, slackBot), &v1alpha1.SlackBot{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SlackBot), err
}

// Update takes the representation of a slackBot and updates it. Returns the server's representation of the slackBot, and an error, if there is any.
func (c *FakeSlackBots) Update(slackBot *v1alpha1.SlackBot) (result *v1alpha1.SlackBot, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(slackbotsResource, c.ns, slackBot), &v1alpha1.SlackBot{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SlackBot), err
}

// Delete takes name of the slackBot and deletes it. Returns an error if one occurs.
func (c *FakeSlackBots) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(slackbotsResource, c.ns, name), &v1alpha1.SlackBot{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSlackBots) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(slackbotsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.SlackBotList{})
	return err
}

// Patch applies the patch and returns the patched slackBot.
func (c *FakeSlackBots) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SlackBot, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(slackbotsResource, c.ns, name, data, subresources...), &v1alpha1.SlackBot{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SlackBot), err
}
